generator client {
  provider = "prisma-client-js"
  output   = "../backend/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  roleId    String
  locked    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refreshToken  String?
  otps      Otp[]

  // Relations
  role   Role @relation(fields: [roleId], references: [id])
  createdShipments Shipment[] @relation("CreatedBy")
  drivenShipments  Shipment[] @relation("DrivenBy")
  managedWarehouses Warehouse[]
}

model Otp {
  id        String   @id @default(uuid())
  codeHash  String
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  permissions RolePermission[] // Explicit relation to RolePermission
  users       User[]
}

model Permission {
  id        String           @id @default(cuid())
  name      String           @unique
  roles     RolePermission[] // Explicit relation to RolePermission
}

model RolePermission {
  id           String      @id @default(cuid())
  roleId       String
  permissionId String
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId]) // Ensure unique combinations of role and permission
}

model Product {
  id          String          @id @default(uuid())
  name        String
  sku         String          @unique
  description String?
  weightKg    Float
  volumeM3    Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  shipmentItems ShipmentItem[]
}

model Shipment {
  id                     String             @id @default(uuid())
  trackingCode           String             @unique
  originWarehouseId      String
  destinationWarehouseId String
  createdById            String
  driverId               String
  status                 ShipmentStatus
  departureTime          DateTime?
  arrivalTime            DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt

  // Relations
  originWarehouse        Warehouse          @relation("OriginWarehouse", fields: [originWarehouseId], references: [id])
  destinationWarehouse   Warehouse          @relation("DestinationWarehouse", fields: [destinationWarehouseId], references: [id])
  createdBy              User               @relation("CreatedBy", fields: [createdById], references: [id])
  driver                 User               @relation("DrivenBy", fields: [driverId], references: [id])
  shipmentItems          ShipmentItem[]
  invoice                Invoice?
  route                  Route?
  trackingUpdates        ShipmentTracking[]
}

enum ShipmentStatus {
  pending
  in_transit
  delivered
  canceled
}

model ShipmentItem {
  shipmentId String
  productId  String
  quantity   Int

  shipment   Shipment @relation(fields: [shipmentId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([shipmentId, productId])
}

model Invoice {
  id         String    @id @default(uuid())
  shipmentId String    @unique
  amountUsd  Float
  status     InvoiceStatus
  issuedAt   DateTime
  paidAt     DateTime?
  createdAt  DateTime  @default(now())

  // Relations
  shipment   Shipment  @relation(fields: [shipmentId], references: [id])
}

enum InvoiceStatus {
  unpaid
  paid
  overdue
}

model Warehouse {
  id         String     @id @default(uuid())
  name       String
  address    String
  city       String
  country    String
  capacityM3 Float
  managerId  String
  createdAt  DateTime   @default(now())

  // Relations
  managedBy  User       @relation(fields: [managerId], references: [id])
  originShipments      Shipment[] @relation("OriginWarehouse")
  destinationShipments Shipment[] @relation("DestinationWarehouse")
}

model Route {
  id             String    @id @default(uuid())
  shipmentId     String    @unique
  distanceKm     Float
  estimatedTime  Int       // in minutes
  routePath      Json
  createdAt      DateTime  @default(now())

  // Relations
  shipment       Shipment  @relation(fields: [shipmentId], references: [id])
}

model ShipmentTracking {
  id         String    @id @default(uuid())
  shipmentId String
  latitude   Float
  longitude  Float
  status     String
  timestamp  DateTime  @default(now())

  // Relations
  shipment   Shipment  @relation(fields: [shipmentId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  actorId   String
  targetId  String
  metadata  Json
  createdAt DateTime @default(now())
}

